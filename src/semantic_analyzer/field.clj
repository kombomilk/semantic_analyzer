(ns semantic-analyzer.field
  (:require [clojure.set]))

(def FIELDS
     {:art "Art"
      :sport "Sports"
      :politics "Politics"
      :economics "Economics"
      :science "Science"
      :education "Education"
      :unknown "Unknown"})

(def STEMS
     {:art
      ["искусств" "художник" "художестве" "образ" "классик" "пейзаж" "карт" "графическ" "график"
       "сюж" "античнос" "античн" "модер" "модернизм" "постмодернизм" "постмодер" "ренессанс"
       "возрожден" "сюрреализм" "абстракционизм" "кубизм" "неоклассик" "классицизм" "барокк"
       "экспрессонизм" "экспресс" "импрессионизм" "импресс" "выставк" "литератур" "книг" "писател"
       "поэт" "рома" "стих" "произведен" "творчеств" "музык" "инструмент" "игр" "выступлен"
       "чтен" "концерт" "архитектур" "архитектор" "скульптур" "изваян"]
      :sport
      ["спорт" "спортивн" "спортсме" "спортсменк" "футбо" "теннис" "хокк" "лыж" "атлетик" "биатло"
       "плаван" "коньк" "гонк" "гандбо" "баскетбо" "бокс" "самб" "дзюд" "фехтован" "участник"
       "побед" "мест" "лидер" "турнир" "состязан" "матч" "суд" "рефер" "кипер"]
      :politics
      ["политик" "политическ" "выбор" "губернатор" "мэр" "президент" "премьер" "министр"
       "демократ" "бюрократ" "демократическ" "монарх" "конституц" "зако" "преступлен" "де"
       "оппозиц" "модернизац" "правительств" "парламент" "парт" "управлен"]
      :economics
      ["экономик" "экономичн" "экономк" "анализ" "барьер" "рост" "бизнес" "бюдж"
       "валов" "деньг" "дефляц" "долг" "дефолт" "заказ" "затрат" "золот" "избыток"
       "издержк" "импорт" "инвестиц" "индексац" "инфляц" "капита" "коммерц" "коммерческ"
       "конкурент" "клиент" "кризис" "маркетинг" "налог" "наличн" "нетто" "номинал"
       "объ" "оптов" "производств" "риск" "сб" "спрос" "стоимос" "товар" "убыток"
       "финанс" "финансов" "финансирован"]
      :science
      ["наук" "научн" "алгоритм" "аргумент" "вопрос" "вывод" "гипотез" "дискусс"
       "доказательств" "задач" "знан" "иде" "иерарх" "изобретен" "информац" "исследован" "категор"
       "классификац" "концепц" "критер" "логик" "метод" "механизм" "монограф" "параметр"
       "показател" "понят" "предм" "признак" "принцип" "прич" "проблем" "противореч" "развит"
       "стат" "теор" "терм" "функц" "фактор" "цитат" "явлен"]
      :education
      ["образован" "воспитан" "образовательн" "шко" "школьник" "студент" "университ"
       "учеб" "учител" "профессор" "ректор" "дека" "стипенд" "грант" "оценк" "балл"
       "абитуриент" "бакалавриат" "магистратур" "докторантур" "аспирант" "доктор"
       "кафедр" "экзаме" "при" "комисс" "дипл" "защит" "диссертац" "степен"]})

(def score (ref
	    {
	     :art 0
	     :sport 0
	     :politics 0
	     :economics 0
	     :science 0
	     :education 0
	     :unknown 0.5}))


(defn updateField
  "Update hashmap element's value"
  [code number]
  (dosync
   (ref-set score
	    (assoc @score code number))))

(defn resetStatistics 
  "Resets statistics about text field"
  []
  (doseq [code (keys STEMS)]
    (updateField code 0)))

(defn printStatistics 
  "Prints statistics about text field"
  []
  (doseq [code (keys STEMS)]
    (println (code FIELDS) ":" (code @score))))

(defn updateScore 
  "Updates data according to the words input vector"
  [words]
  (doseq [code (keys STEMS)]
    (updateField code
		 (+ (code @score)
		    (count
		     (clojure.set/intersection (set words)
					       (set (code STEMS))))))))

(defn getField 
  "Returns suggested text field"
  []
  ((first (apply max-key second @score))
   FIELDS))